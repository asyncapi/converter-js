asyncapi: 2.6.0
id: 'urn:example:com:smartylighting:streetlights:server'

info:
  title: AsyncAPI Sample App
  version: 1.0.1
  description: This is a sample app.
  termsOfService: https://asyncapi.com/terms/
  contact:
    name: API Support
    url: https://www.asyncapi.com/support
    email: support@asyncapi.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: e-commerce
  - name: another-tag
    description: Description...
externalDocs:
  description: Find more info here
  url: https://www.asyncapi.com

defaultContentType: application/json

servers:
  default:
    url: 'api.streetlights.smartylighting.com:{port}'
    description: Test broker
    variables:
      port:
        description: Secure connection (TLS) is available through port 8883.
        default: '1883'
        enum:
          - '1883'
          - '8883'
    protocol: mqtt
    security:
      - apiKey: []
      - flows: ['write:pets']
      - openIdConnect: ['some:scope:1', 'some:scope:2']
  production:
    url: 'api.streetlights.smartylighting.com:{port}/some/path'
    description: Test broker
    variables:
      port:
        description: Secure connection (TLS) is available through port 8883.
        default: '1883'
        enum:
          - '1883'
          - '8883'
    protocol: mqtt
    security:
      - apiKey: []
  withProtocol:
    url: 'mqtt://api.streetlights.smartylighting.com:{port}/some/path'
    description: Test broker
    variables:
      port:
        description: Secure connection (TLS) is available through port 8883.
        default: '1883'
        enum:
          - '1883'
          - '8883'
    protocol: mqtt
    security:
      - apiKey: []

channels:
  'smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured':
    servers: 
      - production
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    publish:
      operationId: lightMeasured
      message:
        payload:
          type: object
  'smartylighting/streetlights/1/0/action/{streetlightId}/turn/on':
    servers: 
      - default
      - production
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    publish:
      message:
        $ref: '#/components/messages/lightMeasured'
    subscribe:
      message:
        oneOf:
          - $ref: '#/components/messages/turnOnOff'
          - messageId: customMessageId
            payload:
              type: object
          - payload:
              type: object
          - $ref: 'https://example.com/message'
  'smartylighting/streetlights/1/0/action/{streetlightId}/turn/off':
    x-channelId: customChannelId
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    subscribe:
      operationId: turnOnOff
      message:
        $ref: '#/components/messages/turnOnOff'
  'smartylighting/streetlights/1/0/action/{streetlightId}/dim':
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    subscribe:
      operationId: dimLight
      message:
        $ref: '#/components/messages/dimLight'
      security:
        - flows: ['write:pets']

components:
  messages:
    lightMeasured:
      summary: >-
        Inform about environmental lighting conditions for a particular
        streetlight.
      payload:
        $ref: '#/components/schemas/lightMeasuredPayload'
    turnOnOff:
      summary: Command a particular streetlight to turn the lights on or off.
      payload:
        $ref: '#/components/schemas/turnOnOffPayload'
    dimLight:
      summary: Command a particular streetlight to dim the lights.
      payload:
        $ref: '#/components/schemas/dimLightPayload'
  schemas:
    lightMeasuredPayload:
      type: object
      properties:
        lumens:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          $ref: '#/components/schemas/sentAt'
    turnOnOffPayload:
      type: object
      properties:
        command:
          type: string
          enum:
            - 'on'
            - 'off'
          description: Whether to turn on or off the light.
        sentAt:
          $ref: '#/components/schemas/sentAt'
    dimLightPayload:
      type: object
      properties:
        percentage:
          type: integer
          description: Percentage to which the light should be dimmed to.
          minimum: 0
          maximum: 100
        sentAt:
          $ref: '#/components/schemas/sentAt'
    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.
  securitySchemes:
    apiKey:
      type: apiKey
      in: user
      description: Provide your API key as the user and leave the password empty.
    flows:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: 'openIdConnectUrl'
    unusedFlows:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
  parameters:
    streetlightId:
      description: The ID of the streetlight.
      schema:
        type: string